name: "Build and test packages"

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

      runs-on:
        required: true
        type: string
      # In order to discriminate across workflows, a prefix is needed.
      # I.e , the operation name, like "publishing" or "building"
      artifacts-storage-prefix:
        required: true
        type: string

      save-artifacts:
        required: false
        type: boolean
        default: true

    secrets:
      git-user-name:
        required: true
      git-user-email:
        required: true
      kotlin-registry-url:
        required: true
      kotlin-registry-username:
        required: true
      kotlin-registry-password:
        required: true
      swift-git-repo-url:
        required: true
env:
  CARGO_TERM_COLOR: always

jobs:
  python:
    name: Python package
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ./lib
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download bindgen artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifacts-storage-prefix }}-bindings-generation-data-${{ github.run_number }}
          path: lib/bindings

      - name: Set up Python cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            lib/target
          key: ${{ runner.os }}-cargo-packages-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-packages

      - name: Python package generation
        run: |
          cargo run -p uniffi-zcash-cli release python -v ${{ inputs.version }}

      - name: Save artifacts for Python package
        if: ${{ inputs.save-artifacts }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifacts-storage-prefix }}-package-python-data-${{ github.run_number }}
          path: lib/packages/python
          if-no-files-found: error

  ruby:
    name: Ruby package
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ./lib
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download bindgen artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifacts-storage-prefix }}-bindings-generation-data-${{ github.run_number }}
          path: lib/bindings

      - name: Set up Ruby cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            lib/target
          key: ${{ runner.os }}-cargo-packages-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-packages

      - name: Setting up Ruby env
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.0"

      - name: Ruby package generation
        run: |
          cargo run -p uniffi-zcash-cli release ruby -v ${{ inputs.version }}

      - name: Save artifacts for Ruby package
        if: ${{ inputs.save-artifacts }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifacts-storage-prefix }}-package-ruby-data-${{ github.run_number }}
          path: lib/packages/ruby
          if-no-files-found: error

  kotlin:
    name: Kotlin package
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ./lib
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download bindgen artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifacts-storage-prefix }}-bindings-generation-data-${{ github.run_number }}
          path: lib/bindings

      - name: Set up Kotlin cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            lib/target
          key: ${{ runner.os }}-cargo-packages-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-packages

      - name: Kotlin package generation
        env:
          KOTLIN_REGISTRY_URL: ${{ secrets.kotlin-registry-url }}
          KOTLIN_REGISTRY_USERNAME: ${{ secrets.kotlin-registry-username }}
          KOTLIN_REGISTRY_PASSWORD: ${{ secrets.kotlin-registry-password }}
        run: |
          cargo run -p uniffi-zcash-cli release kotlin -v ${{ inputs.version }}

      - name: Save artifacts for Kotlin package
        if: ${{ inputs.save-artifacts }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifacts-storage-prefix }}-package-kotlin-data-${{ github.run_number }}
          path: lib/packages/kotlin
          if-no-files-found: error

  # this case needs to be handled more closely,
  # so the libraries will need to be recompiled again.
  swift:
    name: Swift package
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ./lib
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      ## IF MACOS
      - name: Set up Swift cargo cache
        if: ${{ startsWith(inputs.runs-on, 'macos') }}
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            lib/target
            lib/bindings
          key: ${{ runner.os }}-cargo-packages-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-packages

      - name: Prepare build environment
        if: ${{ startsWith(inputs.runs-on, 'macos') }}
        run: |
          cargo run -p uniffi-zcash-cli setup buildenv

      - name: Generate shared libraries
        if: ${{ startsWith(inputs.runs-on, 'macos') }}
        run: |
          cargo run -p uniffi-zcash-cli sharedlibs

      - name: Generate languages bindings
        if: ${{ startsWith(inputs.runs-on, 'macos') }}
        run: |
          cargo run -p uniffi-zcash-cli bindgen --languages=swift

      ## IF UBUNTU
      - name: Download bindgen artifacts
        if: ${{ startsWith(inputs.runs-on, 'ubuntu') }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifacts-storage-prefix }}-bindings-generation-data-${{ github.run_number }}
          path: lib/bindings

      - name: Set up Swift cargo cache
        if: ${{ startsWith(inputs.runs-on, 'ubuntu') }}
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            lib/target
          key: ${{ runner.os }}-cargo-packages-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-packages

      - name: Swift package generation
        env:
          SWIFT_GIT_REPO_URL: ${{ secrets.swift-git-repo-url }}
        ## Below Git settings needs to be adjusted
        run: |
          git config --global user.name ${{ secrets.git-user-name }}
          git config --global user.email ${{ secrets.git-user-email }}
          cargo run -p uniffi-zcash-cli release swift -v ${{ inputs.version }}

      - name: Save artifacts package pointer file for Swift package
        if: ${{ inputs.save-artifacts }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifacts-storage-prefix }}-package-swift-pointer-data-${{ github.run_number }}
          path: |
            lib/packages/swift
          if-no-files-found: error

      - name: Save artifacts package for Swift package
        if: ${{ inputs.save-artifacts }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifacts-storage-prefix }}-package-swift-package-data-${{ github.run_number }}
          path: |
            /tmp/zcash_uniffi_swift_package_build
          if-no-files-found: error
