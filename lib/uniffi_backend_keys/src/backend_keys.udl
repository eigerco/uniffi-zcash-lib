/* zcash_client_backend::keys */
namespace backend_keys {
};

[Error]
enum ZcashError {
  /* hdwallet::error::Error */
  "HDWalletError",
  /* zcash_client_backend::keys::DerivationError */
  "DerivationError",
  "Message",
  "ArrayLengthMismatch",
  "Unknown",
};

/* zcash_primitives::zip32::AccountId */
dictionary ZcashAccountId {
  u32 id;
};

/* zcash_primitives::consensus::Parameters */
enum ZcashConsensusParameters {
  /* zcash_primitives::consensus::MainNetwork */
  "MainNetwork",
  /* zcash_primitives::consensus::TestNetwork */
  "TestNetwork",
};

/* zcash_primitives::legacy::keys::AccountPrivKey */
interface ZcashAccountPrivKey {
  [Name=from_seed, Throws=ZcashError]
  constructor(ZcashConsensusParameters params, sequence<u8> seed, ZcashAccountId account_id);

  [Name=from_bytes, Throws=ZcashError]
  constructor(sequence<u8> data);

  [Name=from_extended_privkey]
  constructor(ZcashExtendedPrivKey key);

  ZcashAccountPubKey to_account_pubkey();

  sequence<u8> to_bytes();

  // todo
};

/* hdwallet::extended_key::ExtendedPrivKey */
interface ZcashExtendedPrivKey {
  [Name=with_seed, Throws=ZcashError]
  constructor(sequence<u8> data);
};

/* zcash_primitives::legacy::keys::AccountPubKey */
interface ZcashAccountPubKey {
  // todo
};

/* zcash_primitives::zip32::sapling::ExtendedSpendingKey */
interface ZcashExtendedSpendingKey {
  // todo
};

/* zcash_client_backend::keys::Era */
enum ZcashKeysEra {
  "Orchard",
};

/* zcash_client_backend::keys::UnifiedSpendingKey */
interface ZcashUnifiedSpendingKey {
  [Name=from_seed, Throws=ZcashError]
  constructor(ZcashConsensusParameters params, sequence<u8> seed, ZcashAccountId account_id);

  ZcashUnifiedFullViewingKey to_unified_full_viewing_key();
  
  sequence<u8> to_bytes(ZcashKeysEra era);

  // todo
};

/* zcash_client_backend::keys::UnifiedFullViewingKey */
interface ZcashUnifiedFullViewingKey {
  [Name=decode, Throws=ZcashError]
  constructor(ZcashConsensusParameters params, [ByRef] string encoded);

  string encode(ZcashConsensusParameters params);

  ZcashDiversifiableFullViewingKey? sapling();
  
  ZcashOrchardFullViewingKey? orchard();

  // todo
};

/* zcash_client_backend::keys::DiversifiableFullViewingKey */
interface ZcashDiversifiableFullViewingKey {
  [Name=from_bytes, Throws=ZcashError]
  constructor(sequence<u8> bytes);

  sequence<u8> to_bytes();

  ZcashSaplingIvk to_ivk(ZcashScope scope);

  ZcashOutgoingViewingKey to_ovk(ZcashScope scope);

  // todo
};

/* zcash_primitives::sapling::SaplingIvk */
interface ZcashSaplingIvk {
  ZcashPaymentAddress? to_payment_address(ZcashDiversifier diversifier);

  sequence<u8> to_repr();

  // todo
};

/* zcash_primitives::sapling::Diversifier */
interface ZcashDiversifier {
  [Throws=ZcashError]
  constructor(sequence<u8> bytes);

  // todo
};

/* zcash_primitives::sapling::keys::OutgoingViewingKey */
interface ZcashOutgoingViewingKey {
  sequence<u8> to_bytes();
};

/* zcash_primitives::sapling::PaymentAddress */
interface ZcashPaymentAddress {
  sequence<u8> to_bytes();

  // todo
};

/* zcash_primitives::zip32::Scope */
enum ZcashScope {
  "External",
  "Internal",
};

/// Orchard

/*orchard::keys::FullViewingKey*/
interface ZcashOrchardFullViewingKey {
  ZcashOrchardIncomingViewingKey to_ivk(ZcashOrchardScope scope);
  ZcashOrchardOutgoingViewingKey to_ovk(ZcashOrchardScope scope);
};

/*orchard::keys::IncomingViewingKey*/
interface ZcashOrchardIncomingViewingKey {
    sequence<u8> to_bytes();
    ZcashOrchardAddress address(ZcashOrchardDiversifier diversifier);
};

/*orchard::Address*/
interface ZcashOrchardAddress {
  sequence<u8> to_raw_address_bytes();
};

/* orchard::keys::OutgoingViewingKey */
interface ZcashOrchardOutgoingViewingKey {
    // Currently Orchard OVK
    // has no public elements we can
    // expose.
};

/* orchard::keys::Scope */
enum ZcashOrchardScope {
  "External",
  "Internal",
};

/* orchard::keys::Diversifier */
interface ZcashOrchardDiversifier {
  [Name=from_bytes, Throws=ZcashError]
  constructor(sequence<u8> bytes);
};